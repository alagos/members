require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FamiliesController, :type => :controller do

  let(:valid_attributes)   { attributes_for(:family) }
  let(:invalid_attributes) { attributes_for(:family, name: nil) }

  let(:church) { create(:church)}
  let(:user)   { create(:user, church: church)}
  let!(:family) { create(:family, church: church)}

  before do
    sign_in user
  end

  describe "GET index" do
    it "assigns all families as @families" do
      get :index
      expect(assigns(:families)).to eq([family])
    end
  end

  describe "GET new" do
    it "assigns a new family as @family" do
      get :new
      expect(assigns(:family)).to be_a_new(Family)
    end
  end

  describe "GET edit" do
    it "assigns the requested family as @family" do
      get :edit, params: {id: family.id}
      expect(assigns(:family)).to eq(family)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Family" do
        expect {
          post :create, params: { family: valid_attributes }
        }.to change(Family, :count).by(1)
      end

      it "assigns a newly created family as @family", focus: true do
        post :create, params: { family: valid_attributes }
        expect(assigns(:family)).to be_a(Family)
        expect(assigns(:family)).to be_persisted
      end

      it "redirects to the created family" do
        post :create, params: { family: valid_attributes }
        expect(response).to redirect_to(families_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved family as @family" do
        post :create, params: { family: invalid_attributes }
        expect(assigns(:family)).to be_a_new(Family)
      end

      it "re-renders the 'new' template" do
        post :create, params: { family: invalid_attributes }
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) { { name: 'Foo' } }

      it "updates the requested family" do
        put :update, params: {id: family.id, :family => new_attributes}
        family.reload
        expect(family.name).to eq 'Foo'
      end

      it "assigns the requested family as @family" do
        put :update, params: {id: family.id, :family => valid_attributes}
        expect(assigns(:family)).to eq(family)
      end

      it "redirects to the family" do
        put :update, params: {id: family.id, :family => valid_attributes}
        expect(response).to redirect_to(families_url)
      end
    end

    describe "with invalid params" do
      it "assigns the family as @family" do
        put :update, params: {id: family.id, :family => invalid_attributes}
        expect(assigns(:family)).to eq(family)
      end

      it "re-renders the 'edit' template" do
        put :update, params: {id: family.id, :family => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy", focus: true do
    it "destroys the requested family" do
      expect {
        delete :destroy, params: {id: family.id}
      }.to change(Family, :count).by(-1)
    end

    it "redirects to the families list" do
      delete :destroy, params: {id: family.id}
      expect(response).to redirect_to(families_url)
    end
  end

end
